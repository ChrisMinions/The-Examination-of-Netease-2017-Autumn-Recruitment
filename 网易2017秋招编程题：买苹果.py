'''
[编程题] 买苹果
时间限制：1秒
空间限制：32768K
小易去附近的商店买苹果，奸诈的商贩使用了捆绑交易，只提供6个每袋和8个每袋的包装(包装不可拆分)。 
可是小易现在只想购买恰好n个苹果，小易想购买尽量少的袋数方便携带。如果不能购买恰好n个苹果，小易将不会购买。 
输入描述:
输入一个整数n，表示小易想购买n(1 ≤ n ≤ 100)个苹果


输出描述:
输出一个整数表示最少需要购买的袋数，如果不能买恰好n个苹果则输出-1

输入例子1:
20

输出例子1:
3
'''

'''
解题思路：最小公倍数
   这道题目思路很简单，先尽量买8个装的苹果，若还不够，则继续买6个装的苹果，
   如果不能恰好买6个装的苹果就先退一个8个装的苹果，那么问题就是退几次8个装的苹果，
   答案是退三次，因为6和8的最小公倍数是24，也就是8的三倍，如果退三次8个装的苹果都没能匹配，
   那么多退也是没用的，问题的复杂度数O(3)
'''

'''
代码运行结果：
答案正确:恭喜！您提交的程序通过了所有的测试用例
'''

n = int(input())

bag_num = n // 8
remains = n % 8

for i in range(3):
    if remains % 6 == 0:
        if remains == 0:
            break
        else:
            bag_num += remains // 6
            remains = 0
    else:
        remains += 8
        bag_num -= 1

if remains:
    print(-1)
else:
    print(bag_num)
